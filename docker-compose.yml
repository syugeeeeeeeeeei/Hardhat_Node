services:
  # Geth サービス
  geth:
    image: ethereum/client-go:stable
    container_name: local_geth
    ports:
      - "8545:8545" # RPCポート
      - "30303:30303" # P2Pポート
    volumes:
      - geth_data:/root/.ethereum # ブロックチェーンデータを永続化
      - ./geth/genesis.json:/root/genesis.json # ジェネシスファイルをマウント
    # ✨ entrypointを明示的に指定し、commandをシェルスクリプトとして渡す
    entrypoint: /bin/sh
    command:
      - -c
      - >-
        if [ ! -d /root/.ethereum/geth ]; then
          geth --datadir /root/.ethereum init /root/genesis.json;
        fi &&
        geth --datadir /root/.ethereum
          --dev
          --dev.period 1
          --http
          --http.addr '0.0.0.0'
          --http.port 8545
          --http.corsdomain '*'
          --http.api 'eth,net,web3,personal'
          --ws
          --ws.addr '0.0.0.0'
          --ws.port 8546
          --ws.origins '*'
          --ws.api 'eth,net,web3,personal'

  # Foundry Anvil サービス
  anvil:
    image: ghcr.io/foundry-rs/foundry:latest
    container_name: local_anvil
    ports:
      - "8546:8545" # ポートをGethと重複しないように変更
    # ✨ entrypointとcommandの記述をより厳密な形式に修正
    entrypoint: /bin/sh
    command:
      - -c
      - "anvil --host 0.0.0.0 --block-base-fee-per-gas 0 -q"

  # ArLocal サービス
  arlocal:
    image: node:22
    container_name: arlocal-instance
    ports:
      - "1984:1984"
    working_dir: /app
    volumes:
      - arlocal_data:/app/data
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:1984"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    # ✨ entrypointを明示的に指定し、commandをシェルスクリプトとして渡す
    entrypoint: /bin/sh
    command:
      - -c
      - "npm install -g arlocal && arlocal --persist --data-path /app/data"

  # Hardhat 開発環境サービス
  hardhat:
    build:
      context: ./hardhat
      dockerfile: Dockerfile
    container_name: local_hardhat
    working_dir: /app
    volumes:
      - ./hardhat:/app
      - /app/node_modules
    depends_on:
      - geth # 依存先をgethに変更
    tty: true
    stdin_open: true

volumes:
  geth_data: # Gethのデータ保存用ボリューム
  arlocal_data: # ArLocalのデータ保存用ボリューム
